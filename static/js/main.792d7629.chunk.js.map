{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","monster","className","alt","src","id","name","email","CardList","monsters","map","Search","placeholder","handleChange","type","onChange","App","state","searchValue","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAGaA,EAAO,SAACC,GACjB,IAAMC,EAAUD,EAAMC,QACtB,OACI,qBAAKC,UAAU,iBAAf,SACI,gCACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,eACtB,6BAAKJ,EAAQK,OACb,kCAAKL,EAAQM,eCNhBC,EAAW,SAASR,GAC7B,OACI,qBAAKE,UAAU,YAAf,SAEQF,EAAMS,SAASC,KAAI,SAAAT,GACf,OAAM,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,UCPhCM,EAAS,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAClC,OACI,8BACK,uBAAOX,UAAU,SAASY,KAAK,SAASF,YAAaA,EAAaG,SAAUF,OCmCzEG,G,wDAhCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAc,IALJ,E,qDASd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAW,EAAKC,SAAS,CAAEf,SAAUc,S,oBAG/C,WAAU,IAAD,OACP,EAAkCE,KAAKR,MAA/BR,EAAR,EAAQA,SAAUS,EAAlB,EAAkBA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAA1B,GACvC,OAAOA,EAAQK,KAAKsB,cAAcC,SAASX,EAAYU,kBAEzD,OACE,qBAAK1B,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,kDACA,cAAC,EAAD,CAAQU,YAAa,kBAAmBC,aAAe,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAcY,EAAEC,OAAOC,WACnG,cAAC,EAAD,CAAUvB,SAAUiB,a,GA3BZO,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.792d7629.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => {\n    const monster = props.monster;\n    return (\n        <div className=\"card-container\">\n            <div>\n                <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2`} />\n                <h3>{monster.name}</h3>\n                <p> {monster.email}</p>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component'\n\nexport const CardList = function(props) {\n    return (\n        <div className='card-list'>\n            {\n                props.monsters.map(monster => {\n                    return<Card key={monster.id} monster={monster}></Card>\n                })\n            }\n        </div>\n    )\n}","import React from 'react';\n\nexport const Search = ({placeholder, handleChange}) => {\n   return (   \n       <div>\n            <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />\n       </div>\n   );\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { Search } from './components/search/search.component';\nimport './components/search/search.styles.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchValue : '',\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => { this.setState({ monsters: users }) });\n  }\n\n  render() {\n    const { monsters, searchValue } = this.state;\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchValue.toLowerCase());\n    });\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Monsters Rolodex</h1>\n          <Search placeholder={'Search monsters'} handleChange={ e => this.setState({ searchValue : e.target.value })}/>\n          <CardList monsters={filteredMonsters} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}